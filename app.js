const express = require('express')
const path = require('path')
const cookieParser = require('cookie-parser');
const cookieSession = require('cookie-session');
const bodyParser = require('body-parser');
const logger = require('morgan');
const favicon = require("serve-favicon");
const dbTools = require('./javascripts/dbTools');

const indexRouter = require('./routes/index');
const loginRouter = require('./routes/login');
const signupRouter = require('./routes/signup');
const authenticationRouter = require('./routes/2fa');
const postRouter = require('./routes/post');
const viewPostRouter = require('./routes/viewpost');
const deleteRouter = require('./routes/deleteacc');
const SECRET_KEY = 'S9Djn3dh0dnj3yJuYx12gui90DIkxgwm';
const app = express();
const server = require('http').createServer(app);
const {Server} = require("socket.io");
const io = new Server(server);

// view engine setup
app.set('views', path.join(__dirname, 'views'));
app.set('view engine', 'pug');

app.use(logger('dev'));
app.use(express.json());
app.use(express.urlencoded({ extended: false }));
app.use(cookieParser());
app.use(express.static(path.join(__dirname, 'public')));
app.use(bodyParser.urlencoded({extended : false}))
app.use(favicon(path.join(__dirname, 'public/static/aybb4-6nupu-001.ico')));



//using Express cookies - encrypted and signed with SHA-256, over 200 characters long, and automatically delete
app.use(cookieSession({
  secret: SECRET_KEY, //secret that all cookies are signed with (SHA256, with this as the key) --  (32 chars)
  maxAge: 60 * 60 * 1000, //1 hour (in milliseconds)
  sameSite: 'strict', //only works on this domain -- a 'same site' cookie
  httpOnly: true //means that cookie cannot be accessed with client side Javascript
}));



//these pages use extra javascript so have their own file
app.use('/', indexRouter);
app.use('/login', loginRouter);
app.use('/signup', signupRouter);
app.use('/2fa', authenticationRouter);
app.use('/post', postRouter);
app.use('/viewpost', viewPostRouter);
app.use('/deleteacc', deleteRouter);

//these pages are relatively simple so just placed here
app.get('/privacypolicy', async function (req, res) {
  if (req.session && req.session.session_id) {
    let user = await dbTools.getUserById(req.session.user_id);
    res.render('privacypolicy', {title: 'MyBlogChum', auth: true, user: user});
  } else {
    res.render('privacypolicy', {title: 'MyBlogChum', auth: false});
  }
});

app.get('/signout', function (req, res) {
    if (req.session && req.session.session_id) {
      req.session = null;
    }
  res.clearCookie('session')
    res.redirect('/');

});

// catch 404
app.use(async function(req,res){
  if (req.session && req.session.session_id) {
    let user = await dbTools.getUserById(req.session.user_id);
    res.status(404).render('error', {title: 'MyBlogChum', auth: true, user: user});
  }
  else {
    res.status(404).render('error', {title: 'MyBlogChum', auth: false});
  }
});

io.on("connection", (socket) => {
  socket.on("like", async (data) => {
    console.log(data);
    const arr = data.post.split(",");
    const postid = arr[0];
    const userid = arr[1];
    let bool = await dbTools.hasUserLikedPost(postid, userid);
    if (bool) {
      await dbTools.deleteLike(postid, userid);
      io.emit("likeadded", postid);
    }
    else {
      await dbTools.addLike(postid, userid);
      io.emit("likedeleted", postid);
    }
  });
});
const startServer = async () => {
  await dbTools.populate();
  console.log("Open on localhost:3000");
  server.listen(3000);
}
startServer()


module.exports = {
  app
}

//Most of this code was autogenerated by WebStorm IDE when setting up an Express project